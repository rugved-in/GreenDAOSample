package rage7.greendaosample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rage7.greendaosample.Bike;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BIKE".
*/
public class BikeDao extends AbstractDao<Bike, Long> {

    public static final String TABLENAME = "BIKE";

    /**
     * Properties of entity Bike.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Modelname = new Property(1, String.class, "modelname", false, "MODELNAME");
        public final static Property ModelLinkRewrite = new Property(2, String.class, "modelLinkRewrite", false, "MODEL_LINK_REWRITE");
        public final static Property Popularity = new Property(3, String.class, "popularity", false, "POPULARITY");
        public final static Property ExShowroomPrice = new Property(4, String.class, "exShowroomPrice", false, "EX_SHOWROOM_PRICE");
        public final static Property EngineCapacity = new Property(5, String.class, "engineCapacity", false, "ENGINE_CAPACITY");
    };


    public BikeDao(DaoConfig config) {
        super(config);
    }
    
    public BikeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BIKE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MODELNAME\" TEXT," + // 1: modelname
                "\"MODEL_LINK_REWRITE\" TEXT," + // 2: modelLinkRewrite
                "\"POPULARITY\" TEXT," + // 3: popularity
                "\"EX_SHOWROOM_PRICE\" TEXT," + // 4: exShowroomPrice
                "\"ENGINE_CAPACITY\" TEXT);"); // 5: engineCapacity
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BIKE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bike entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String modelname = entity.getModelname();
        if (modelname != null) {
            stmt.bindString(2, modelname);
        }
 
        String modelLinkRewrite = entity.getModelLinkRewrite();
        if (modelLinkRewrite != null) {
            stmt.bindString(3, modelLinkRewrite);
        }
 
        String popularity = entity.getPopularity();
        if (popularity != null) {
            stmt.bindString(4, popularity);
        }
 
        String exShowroomPrice = entity.getExShowroomPrice();
        if (exShowroomPrice != null) {
            stmt.bindString(5, exShowroomPrice);
        }
 
        String engineCapacity = entity.getEngineCapacity();
        if (engineCapacity != null) {
            stmt.bindString(6, engineCapacity);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bike readEntity(Cursor cursor, int offset) {
        Bike entity = new Bike( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // modelname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // modelLinkRewrite
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // popularity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // exShowroomPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // engineCapacity
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bike entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setModelname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModelLinkRewrite(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPopularity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExShowroomPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEngineCapacity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bike entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bike entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
